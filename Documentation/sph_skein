// TODO : all functions in this file should move to a new file in Function folder and in this file we should name those functions

file sph_skein.h :

\\ TODO : make a file for all structs and defines
We define a struct named "sph_skein_big_context" , this struct has 64 bits of unsigned characters that are for alignment, then an unsigned long variable of size_t named ptr, then 8 64-bit numbers named h0 to h7 and then a 64-bit number named bcount, and this struct is the type of our skein's hashes, like skein-224 , skein-256 , skein-384 or skein-512 (the standard one).
We have the same functions for all these skein hashings(224, 256, 384, 512).

First we start with the 512-bit skein hashing because it's the standard one.
To check what each of the functions named below does, check the Functions folder.


sph_skein512_init(void *cc) : in this function we call :


skein_big_init((sph_skein_big_context *)cc, IV512) : in this function cc->hi = IV512[i] for i from 0 to 7 and then cc->bcount = 0 and cc->ptr = 0. In this function we set the value of cc that is an implementation of our struct.(we initialize cc with IV512 values)(IV512 is a 512-bit hexadecimal number that you can see in file skein.c line 1060 // TODO : figure out what these numbers are) //




sph_skein512(void *cc, const void *data, size_t len) : 
	In this function we call skein_big_core(cc, data, len) that we describe in skein_big_core.txt.


// TODO : describe how this function works base on what we know on skein_big_core //




sph_skein512_close(void *cc, void *dst);
	In this function we call sph_skein512_addbits_and_close(cc, 0, 0, dst) and this function is equivalent to calling: skein_big_close((sph_skein_big_context *)cc, 0, 0, dst, 64); and         sph_skein512_init(cc) : 
	



// TODO : document this function




void sph_skein512_addbits_and_close(
	void *cc, unsigned ub, unsigned n, void *dst);

// TODO : document this function

// TODO : the functions till here are all for 512 bit hashing we should describe all these functions for all the other ones
